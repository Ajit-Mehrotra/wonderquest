{"ast":null,"code":"var _jsxFileName = \"/Users/erunfernando/coding_projects/Auto-KanBan/src/App.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useState, useEffect } from 'react'; // React and hooks for state management and side effects\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // Drag and drop functionality\nimport { Card, Button, Badge, Container, Row, Col, Form } from 'react-bootstrap'; // UI components from react-bootstrap\nimport { FaCaretDown, FaCaretLeft } from 'react-icons/fa'; // Icons for UI\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap CSS\n\n// Main App component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialize state for tasks with useState hook\n  // tasks is an object with keys for each task status and an array of tasks\n  const [tasks, setTasks] = useState({\n    'Priority Backlog': [],\n    'Today': [],\n    'Done Done': []\n  });\n  // State to control the visibility of the 'Done Done' column\n  const [showDoneDone, setShowDoneDone] = useState(true);\n\n  // useEffect hook to fetch tasks from an API when the component first mounts\n  useEffect(() => {\n    fetch('https://api.airtable.com/v0/appVXFJJlBFs4nDeq/Design%20Projects?filterByFormula=OR(%7BStatus%7D%3D%27Priority%20Backlog%27,%7BStatus%7D%3D%27Today%27,%7BStatus%7D%3D%27Done%20Done%27)&sort%5B0%5D%5Bfield%5D=Ranking%20Final&sort%5B0%5D%5Bdirection%5D=desc', {\n      headers: {\n        'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}` // Include API key in the request header\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`); // Handle HTTP errors\n      }\n      return response.json(); // Parse response as JSON\n    }).then(data => {\n      // Initialize new tasks object\n      const newTasks = {\n        'Priority Backlog': [],\n        'Today': [],\n        'Done Done': []\n      };\n      // Iterate over the fetched data and structure it into tasks\n      data.records.forEach(record => {\n        const task = {\n          id: record.id,\n          fields: {\n            Name: record.fields.Name,\n            Notes: record.fields.Notes || '',\n            // Use empty string if no notes are available\n            Size: record.fields.Size,\n            'Ranking Final': record.fields['Ranking Final'],\n            Value: record.fields.Value,\n            Urgency: record.fields.Urgency\n          },\n          showDescription: false // Initially hide the task description\n        };\n        // Add tasks to the appropriate status column\n        if (newTasks[record.fields.Status]) {\n          newTasks[record.fields.Status].push(task);\n        }\n      });\n      setTasks(newTasks); // Update state with new tasks\n    });\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  // Function to handle the end of a drag-and-drop operation\n  const handleDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // If there's no destination or the item was dropped in the same place, do nothing\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Get the source and destination columns\n    const start = tasks[source.droppableId];\n    const finish = tasks[destination.droppableId];\n    // Remove the dragged task from the source column\n    const task = start.splice(source.index, 1)[0];\n    if (destination.droppableId === source.droppableId) {\n      // If the task is moved within the same column\n      finish.splice(destination.index, 0, task); // Add the task to its new position in the same column\n\n      let newRankingManual;\n      if (destination.index === 0) {\n        // If the task is moved to the top of the column\n        newRankingManual = finish[1].fields['Ranking Final'] + 1;\n      } else if (destination.index === finish.length - 1) {\n        // If the task is moved to the bottom of the column\n        newRankingManual = finish[finish.length - 2].fields['Ranking Final'] - 1;\n      } else {\n        // If the task is moved somewhere in the middle\n        newRankingManual = (finish[destination.index - 1].fields['Ranking Final'] + finish[destination.index + 1].fields['Ranking Final']) / 2;\n      }\n\n      // Update the task's manual ranking\n      task.fields['Ranking Manual'] = newRankingManual;\n\n      // Send a PATCH request to update the task's ranking in the database\n      fetch(`${process.env.REACT_APP_API_BASE_URL}/Design%20Projects/${draggableId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fields: {\n            'Ranking Manual': newRankingManual\n          }\n        })\n      }).then(response => response.json()).then(data => console.log(data)) // Log response for debugging\n      .catch(error => console.error(error)); // Log errors\n    } else {\n      // If the task is moved to a different column\n      finish.splice(destination.index, 0, task); // Add the task to its new position in the destination column\n      const newStatus = destination.droppableId === 'Done' ? 'Done Done' : destination.droppableId;\n\n      // Send a PATCH request to update the task's status in the database\n      fetch(`${process.env.REACT_APP_API_BASE_URL}/Design%20Projects/${draggableId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fields: {\n            Status: newStatus\n          }\n        })\n      }).then(response => response.json()).then(data => console.log(data)) // Log response for debugging\n      .catch(error => console.error(error)); // Log errors\n    }\n\n    // Update state with the new task positions\n    setTasks({\n      ...tasks,\n      [source.droppableId]: start,\n      [destination.droppableId]: finish\n    });\n  };\n\n  // Function to toggle the visibility of a task's description\n  const toggleDescription = taskId => {\n    setTasks(prevTasks => {\n      const newTasks = {\n        ...prevTasks\n      };\n      // Iterate through each column to find the task by its ID and toggle its description visibility\n      for (let columnId in newTasks) {\n        newTasks[columnId] = newTasks[columnId].map(task => {\n          if (task.id === taskId) {\n            return {\n              ...task,\n              showDescription: !task.showDescription\n            };\n          }\n          return task;\n        });\n      }\n      return newTasks;\n    });\n  };\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: Object.entries(tasks).map(([columnId, tasks], index) => /*#__PURE__*/_jsxDEV(Col, {\n          md: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center'\n              },\n              children: [columnId, columnId === 'Done Done' && /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"switch\",\n                id: \"done-done-toggle\",\n                label: \"\",\n                checked: showDoneDone,\n                onChange: () => setShowDoneDone(!showDoneDone) // Toggle the visibility of the 'Done Done' column\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: columnId,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.droppableProps,\n              children: [tasks.map((task, index) => (columnId !== 'Done Done' || showDoneDone) &&\n              /*#__PURE__*/\n              // Conditionally render tasks based on 'Done Done' visibility\n              _jsxDEV(Draggable, {\n                draggableId: task.id,\n                index: index,\n                children: provided => /*#__PURE__*/_jsxDEV(Card, {\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  ...provided.dragHandleProps,\n                  children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center'\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                        children: task.fields.Name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 190,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(Badge, {\n                          pill: true,\n                          className: \"size-badge\",\n                          children: task.fields.Size\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 192,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(Button, {\n                          variant: \"link\",\n                          onClick: () => toggleDescription(task.id),\n                          children: task.showDescription ? /*#__PURE__*/_jsxDEV(FaCaretDown, {}, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 194,\n                            columnNumber: 63\n                          }, this) : /*#__PURE__*/_jsxDEV(FaCaretLeft, {}, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 194,\n                            columnNumber: 81\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 193,\n                          columnNumber: 37\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 191,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 33\n                    }, this), task.showDescription &&\n                    /*#__PURE__*/\n                    // Conditionally render task description\n                    _jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                        children: task.fields.Notes\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 200,\n                        columnNumber: 37\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"badge-label\",\n                          children: \"Urgency: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 202,\n                          columnNumber: 39\n                        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n                          pill: true,\n                          className: \"urgency-badge\",\n                          children: task.fields.Urgency\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 203,\n                          columnNumber: 39\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 201,\n                        columnNumber: 37\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"badge-label\",\n                          children: \"Value: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 206,\n                          columnNumber: 39\n                        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n                          pill: true,\n                          className: \"value-badge\",\n                          children: task.fields.Value\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 207,\n                          columnNumber: 39\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 37\n                      }, this)]\n                    }, void 0, true)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 29\n                }, this)\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 25\n              }, this)), provided.placeholder, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)]\n        }, columnId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n// Export the App component as the default export\n_s(App, \"0N2e9BgXV9I2ZnN5nSBeAyvkPuQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","Card","Button","Badge","Container","Row","Col","Form","FaCaretDown","FaCaretLeft","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","tasks","setTasks","showDoneDone","setShowDoneDone","fetch","headers","process","env","REACT_APP_API_KEY","then","response","ok","Error","status","json","data","newTasks","records","forEach","record","task","id","fields","Name","Notes","Size","Value","Urgency","showDescription","Status","push","handleDragEnd","result","destination","source","draggableId","droppableId","index","start","finish","splice","newRankingManual","length","REACT_APP_API_BASE_URL","method","body","JSON","stringify","console","log","catch","error","newStatus","toggleDescription","taskId","prevTasks","columnId","map","onDragEnd","children","Object","entries","md","style","display","justifyContent","alignItems","Check","type","label","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","provided","ref","innerRef","droppableProps","draggableProps","dragHandleProps","Body","Title","pill","className","variant","onClick","Text","placeholder","_c","$RefreshReg$"],"sources":["/Users/erunfernando/coding_projects/Auto-KanBan/src/App.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useState, useEffect } from 'react'; // React and hooks for state management and side effects\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // Drag and drop functionality\nimport { Card, Button, Badge, Container, Row, Col, Form } from 'react-bootstrap'; // UI components from react-bootstrap\nimport { FaCaretDown, FaCaretLeft } from 'react-icons/fa'; // Icons for UI\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap CSS\n\n// Main App component\nfunction App() {\n  // Initialize state for tasks with useState hook\n  // tasks is an object with keys for each task status and an array of tasks\n  const [tasks, setTasks] = useState({ 'Priority Backlog': [], 'Today': [], 'Done Done': [] });\n  // State to control the visibility of the 'Done Done' column\n  const [showDoneDone, setShowDoneDone] = useState(true);\n\n  // useEffect hook to fetch tasks from an API when the component first mounts\n  useEffect(() => {\n    fetch('https://api.airtable.com/v0/appVXFJJlBFs4nDeq/Design%20Projects?filterByFormula=OR(%7BStatus%7D%3D%27Priority%20Backlog%27,%7BStatus%7D%3D%27Today%27,%7BStatus%7D%3D%27Done%20Done%27)&sort%5B0%5D%5Bfield%5D=Ranking%20Final&sort%5B0%5D%5Bdirection%5D=desc', {\n      headers: {\n        'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}` // Include API key in the request header\n      }\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`); // Handle HTTP errors\n      }\n      return response.json(); // Parse response as JSON\n    })\n    .then(data => {\n      // Initialize new tasks object\n      const newTasks = { 'Priority Backlog': [], 'Today': [], 'Done Done': [] };\n      // Iterate over the fetched data and structure it into tasks\n      data.records.forEach(record => {\n        const task = {\n          id: record.id,\n          fields: {\n            Name: record.fields.Name,\n            Notes: record.fields.Notes || '', // Use empty string if no notes are available\n            Size: record.fields.Size,\n            'Ranking Final': record.fields['Ranking Final'],\n            Value: record.fields.Value,\n            Urgency: record.fields.Urgency\n          },\n          showDescription: false // Initially hide the task description\n        };\n        // Add tasks to the appropriate status column\n        if (newTasks[record.fields.Status]) {\n          newTasks[record.fields.Status].push(task);\n        }\n      });\n      setTasks(newTasks); // Update state with new tasks\n    });\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  // Function to handle the end of a drag-and-drop operation\n  const handleDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    // If there's no destination or the item was dropped in the same place, do nothing\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // Get the source and destination columns\n    const start = tasks[source.droppableId];\n    const finish = tasks[destination.droppableId];\n    // Remove the dragged task from the source column\n    const task = start.splice(source.index, 1)[0];\n\n    if (destination.droppableId === source.droppableId) {\n      // If the task is moved within the same column\n      finish.splice(destination.index, 0, task); // Add the task to its new position in the same column\n\n      let newRankingManual;\n      if (destination.index === 0) {\n        // If the task is moved to the top of the column\n        newRankingManual = finish[1].fields['Ranking Final'] + 1;\n      } else if (destination.index === finish.length - 1) {\n        // If the task is moved to the bottom of the column\n        newRankingManual = finish[finish.length - 2].fields['Ranking Final'] - 1;\n      } else {\n        // If the task is moved somewhere in the middle\n        newRankingManual = (finish[destination.index - 1].fields['Ranking Final'] + finish[destination.index + 1].fields['Ranking Final']) / 2;\n      }\n\n      // Update the task's manual ranking\n      task.fields['Ranking Manual'] = newRankingManual;\n\n      // Send a PATCH request to update the task's ranking in the database\n      fetch(`${process.env.REACT_APP_API_BASE_URL}/Design%20Projects/${draggableId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fields: {\n            'Ranking Manual': newRankingManual\n          }\n        })\n      })\n      .then(response => response.json())\n      .then(data => console.log(data)) // Log response for debugging\n      .catch(error => console.error(error)); // Log errors\n    } else {\n      // If the task is moved to a different column\n      finish.splice(destination.index, 0, task); // Add the task to its new position in the destination column\n      const newStatus = destination.droppableId === 'Done' ? 'Done Done' : destination.droppableId;\n\n      // Send a PATCH request to update the task's status in the database\n      fetch(`${process.env.REACT_APP_API_BASE_URL}/Design%20Projects/${draggableId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fields: {\n            Status: newStatus\n          }\n        })\n      })\n      .then(response => response.json())\n      .then(data => console.log(data)) // Log response for debugging\n      .catch(error => console.error(error)); // Log errors\n    }\n\n    // Update state with the new task positions\n    setTasks({\n      ...tasks,\n      [source.droppableId]: start,\n      [destination.droppableId]: finish,\n    });\n  };\n\n  // Function to toggle the visibility of a task's description\n  const toggleDescription = (taskId) => {\n    setTasks(prevTasks => {\n      const newTasks = { ...prevTasks };\n      // Iterate through each column to find the task by its ID and toggle its description visibility\n      for (let columnId in newTasks) {\n        newTasks[columnId] = newTasks[columnId].map(task => {\n          if (task.id === taskId) {\n            return { ...task, showDescription: !task.showDescription };\n          }\n          return task;\n        });\n      }\n      return newTasks;\n    });\n  };\n\n  // Render the component\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Container>\n        <Row>\n          {Object.entries(tasks).map(([columnId, tasks], index) => (\n            <Col key={columnId} md={4}>\n              <h2>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  {columnId}\n                  {columnId === 'Done Done' && (\n                    <Form.Check \n                      type=\"switch\"\n                      id=\"done-done-toggle\"\n                      label=\"\"\n                      checked={showDoneDone}\n                      onChange={() => setShowDoneDone(!showDoneDone)} // Toggle the visibility of the 'Done Done' column\n                    />\n                  )}\n                </div>\n              </h2>\n              <Droppable droppableId={columnId}>\n                {(provided) => (\n                  <div ref={provided.innerRef} {...provided.droppableProps}>\n                    {tasks.map((task, index) => (\n                      (columnId !== 'Done Done' || showDoneDone) && ( // Conditionally render tasks based on 'Done Done' visibility\n                        <Draggable key={task.id} draggableId={task.id} index={index}>\n                          {(provided) => (\n                            <Card ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                              <Card.Body>\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                  <Card.Title>{task.fields.Name}</Card.Title>\n                                  <div>\n                                    <Badge pill className=\"size-badge\">{task.fields.Size}</Badge>\n                                    <Button variant=\"link\" onClick={() => toggleDescription(task.id)}>\n                                      {task.showDescription ? <FaCaretDown /> : <FaCaretLeft />}\n                                    </Button>\n                                  </div>\n                                </div>\n                                {task.showDescription && ( // Conditionally render task description\n                                  <>\n                                    <Card.Text>{task.fields.Notes}</Card.Text>\n                                    <div>\n                                      <span className=\"badge-label\">Urgency: </span>\n                                      <Badge pill className=\"urgency-badge\">{task.fields.Urgency}</Badge>\n                                    </div>\n                                    <div>\n                                      <span className=\"badge-label\">Value: </span>\n                                      <Badge pill className=\"value-badge\">{task.fields.Value}</Badge>\n                                    </div>\n                                  </>\n                                )}\n                              </Card.Body>\n                            </Card>\n                          )}\n                        </Draggable>\n                      )\n                    ))}\n                    {provided.placeholder} {/* Placeholder to maintain layout during dragging */}\n                  </div>\n                )}\n              </Droppable>\n            </Col>\n          ))}\n        </Row>\n      </Container>\n    </DragDropContext>\n  );\n}\n\n// Export the App component as the default export\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}